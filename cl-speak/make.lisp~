; -------------------------------------------------------------
; Edward Alan Puccini 15.07.2015
; -------------------------------------------------------------
; OpenGL test with my own model-loader
; -------------------------------------------------------------
; file: make.lisp 
; -------------------------------------------------------------
; make - compile, load and run
; Compile this file and every other needed file gets compiled.
; On error check path in compile-files
; -------------------------------------------------------------
; Requirements: cl-opengl cl-glu cl-glut png pcall stmx
; -------------------------------------------------------------

;; -----------------
;; External packages
;; -----------------
(require 'cl-opengl)   ; load OpenGL bindings
(require 'cl-glu)      ; load GLU bindings
(require 'png)
(require 'marshal)
(require 'cl-ppcre)
(require 'cl-glfw3)
;(require 'sdl2)
(require 'alexandria)
(require 'trivial-main-thread)
(require 'stmx)
(require 'bordeaux-threads)
										;(require 'lparallel)
(require 'swank)
(require 'pcall)

;
; load and compile helper
;
(defmacro load-and-compile-set (directory &body forms)
"Macro for doing the same things in seuquence"
  `(progn
    ,@(loop for f in forms collect `(load (compile-file (merge-pathnames ,directory ,f))))))

;
; Compile all files on C-c C-c
;
(eval-when (:load-toplevel :compile-toplevel :execute)
  "Executed at compile time. Does load and compile
all necessary files including packages"
  
  (require 'cl-opengl)   ; load OpenGL bindings
  (require 'cl-glu)      ; load GLU bindings
  (require 'png)
  (require 'marshal)
  (require 'cl-ppcre)
  (require 'cl-glfw3)
  (require 'alexandria)
  (require 'trivial-main-thread)
  (require 'stmx)
  (require 'bordeaux-threads)
  (require 'pcall)
  (require 'swank)
  
  (load-and-compile-set *default-pathname-defaults*
	"glm-package.lisp"                        ;; Infrastructure
	"glm-swank.lisp"
	"glm-globals.lisp"                        ;; "
	"glm-persistance.lisp"
	"glm-string.lisp"
	"glm-functional.lisp"
	"glm-file-io.lisp"
	"glm-types.lisp"                         ;; Domain types and classes
	"glm-texture.lisp"
	"glm-model-iface.lisp"
	"glm-animator-iface.lisp"
	"glm-scene-iface.lisp"
	"glm-math.lisp"                          ;; Domain functions
	"glm-obj-parser.lisp"
	"glm-model-impl.lisp"                    ;; Domain class-methods    
	"glm-animator-impl.lisp"
	"glm-scene-impl.lisp"
	"glm-renderer-iface.lisp"                ;; Presentation-layer
	"glm-phong-renderer-iface.lisp"          ;; "
	"glm-basic-animator-iface.lisp"          ;; "
	"glm-opengl.lisp"                        ;; "
	"glm-phong-renderer-impl.lisp"           ;; 
	"glm-basic-animator-impl.lisp"           ;; "
	"glm-mainloop.lisp"                      
	"glm-model-viewer.lisp"))                ;; Example application / Modelviewer

(defun main ()
  (glm:start))

(main)
